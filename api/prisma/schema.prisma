generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  ratings   Int[]
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address[]
  orders    Order[]
  products  Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  userId      Int?
  categoryId  Int?
  orderId     Int?
  name        String
  description String?
  ratings     Int[]
  ratingsAvg  Float?
  imagesPath  String?
  price       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category?     @relation(fields: [categoryId], references: [id])
  order       Order?        @relation(fields: [orderId], references: [id])
  user        User?         @relation(fields: [userId], references: [id])
  productTags ProductTags[]
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String    @unique
  description  String?
  products     Product[]
}

model Tags {
  id          Int           @id @default(autoincrement())
  name        String
  productTags ProductTags[]
}

model ProductTags {
  id        Int      @id @default(autoincrement())
  productId Int?
  tagId     Int?
  product   Product? @relation(fields: [productId], references: [id])
  tag       Tags?    @relation(fields: [tagId], references: [id])
}

model Address {
  id           Int    @id @default(autoincrement())
  userId       Int?
  firstName    String
  lastName     String
  email        String
  addressLine1 String
  addressLine2 String
  phoneNumber  String
  city         String
  region       String
  postalCode   String
  country      String
  user         User?  @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id             Int     @id @default(autoincrement())
  methodName     String
  accountAddress Int
  orders         Order[]
}

model Order {
  id              Int            @id @default(autoincrement())
  paymentMethodId Int?
  userId          Int?
  orderStatus     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])
  products        Product[]
}
